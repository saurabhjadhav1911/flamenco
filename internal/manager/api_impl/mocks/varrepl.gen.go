// Code generated by MockGen. DO NOT EDIT.
// Source: projects.blender.org/studio/flamenco/internal/manager/api_impl (interfaces: VariableReplacer)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	config "projects.blender.org/studio/flamenco/internal/manager/config"
)

// MockVariableReplacer is a mock of VariableReplacer interface.
type MockVariableReplacer struct {
	ctrl     *gomock.Controller
	recorder *MockVariableReplacerMockRecorder
}

// MockVariableReplacerMockRecorder is the mock recorder for MockVariableReplacer.
type MockVariableReplacerMockRecorder struct {
	mock *MockVariableReplacer
}

// NewMockVariableReplacer creates a new mock instance.
func NewMockVariableReplacer(ctrl *gomock.Controller) *MockVariableReplacer {
	mock := &MockVariableReplacer{ctrl: ctrl}
	mock.recorder = &MockVariableReplacerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVariableReplacer) EXPECT() *MockVariableReplacerMockRecorder {
	return m.recorder
}

// NewVariableExpander mocks base method.
func (m *MockVariableReplacer) NewVariableExpander(arg0 config.VariableAudience, arg1 config.VariablePlatform) *config.VariableExpander {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewVariableExpander", arg0, arg1)
	ret0, _ := ret[0].(*config.VariableExpander)
	return ret0
}

// NewVariableExpander indicates an expected call of NewVariableExpander.
func (mr *MockVariableReplacerMockRecorder) NewVariableExpander(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewVariableExpander", reflect.TypeOf((*MockVariableReplacer)(nil).NewVariableExpander), arg0, arg1)
}

// NewVariableToValueConverter mocks base method.
func (m *MockVariableReplacer) NewVariableToValueConverter(arg0 config.VariableAudience, arg1 config.VariablePlatform) *config.ValueToVariableReplacer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewVariableToValueConverter", arg0, arg1)
	ret0, _ := ret[0].(*config.ValueToVariableReplacer)
	return ret0
}

// NewVariableToValueConverter indicates an expected call of NewVariableToValueConverter.
func (mr *MockVariableReplacerMockRecorder) NewVariableToValueConverter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewVariableToValueConverter", reflect.TypeOf((*MockVariableReplacer)(nil).NewVariableToValueConverter), arg0, arg1)
}

// ResolveVariables mocks base method.
func (m *MockVariableReplacer) ResolveVariables(arg0 config.VariableAudience, arg1 config.VariablePlatform) map[string]config.ResolvedVariable {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveVariables", arg0, arg1)
	ret0, _ := ret[0].(map[string]config.ResolvedVariable)
	return ret0
}

// ResolveVariables indicates an expected call of ResolveVariables.
func (mr *MockVariableReplacerMockRecorder) ResolveVariables(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveVariables", reflect.TypeOf((*MockVariableReplacer)(nil).ResolveVariables), arg0, arg1)
}
