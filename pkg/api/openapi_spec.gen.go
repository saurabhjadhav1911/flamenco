// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"z+HS9T/99un/BQAA//+MoGf5BQYBAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
