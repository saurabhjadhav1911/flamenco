// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"XwAAAP//X9irkUUBAQA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
