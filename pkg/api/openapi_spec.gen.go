// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
