// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
