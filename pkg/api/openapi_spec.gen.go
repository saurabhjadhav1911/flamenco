// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
