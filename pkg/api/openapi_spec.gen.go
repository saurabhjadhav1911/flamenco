// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AP//gDoBPDoHAQA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
