// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AwAA//+Tnnpa2OcAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
