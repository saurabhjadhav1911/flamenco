// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"ab/JSahoFs/h0vU//vrx/wUAAP//rhb2iMMCAQA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
