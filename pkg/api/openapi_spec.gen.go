// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
