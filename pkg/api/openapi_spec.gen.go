// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
