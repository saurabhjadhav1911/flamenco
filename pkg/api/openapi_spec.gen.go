// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"0vU//fbp/wUAAP//QMYS9PwEAQA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
