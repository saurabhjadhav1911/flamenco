// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
