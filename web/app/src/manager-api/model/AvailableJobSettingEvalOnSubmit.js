/**
 * Flamenco manager
 * Render Farm manager API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AvailableJobSettingEvalOnSubmit model module.
 * @module model/AvailableJobSettingEvalOnSubmit
 * @version 0.0.0
 */
class AvailableJobSettingEvalOnSubmit {
    /**
     * Constructs a new <code>AvailableJobSettingEvalOnSubmit</code>.
     * Enables the &#39;eval on submit&#39; toggle button behavior for this setting. A toggle button will be shown in Blender&#39;s submission interface. When toggled on, the &#x60;eval&#x60; expression will determine the setting&#39;s value. Manually editing the setting is then no longer possible, and instead of an input field, the &#39;placeholder&#39; string is shown. An example use is the to-be-rendered frame range, which by default automatically follows the scene range, but can be overridden manually when desired. 
     * @alias module:model/AvailableJobSettingEvalOnSubmit
     * @param showButton {Boolean} Enable or disable the 'eval on submit' toggle button.
     * @param placeholder {String} Placeholder text to show when the manual input field is hidden (because eval-on-submit has been toggled on by the user). 
     */
    constructor(showButton, placeholder) { 
        
        AvailableJobSettingEvalOnSubmit.initialize(this, showButton, placeholder);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, showButton, placeholder) { 
        obj['showButton'] = showButton;
        obj['placeholder'] = placeholder;
    }

    /**
     * Constructs a <code>AvailableJobSettingEvalOnSubmit</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AvailableJobSettingEvalOnSubmit} obj Optional instance to populate.
     * @return {module:model/AvailableJobSettingEvalOnSubmit} The populated <code>AvailableJobSettingEvalOnSubmit</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AvailableJobSettingEvalOnSubmit();

            if (data.hasOwnProperty('showButton')) {
                obj['showButton'] = ApiClient.convertToType(data['showButton'], 'Boolean');
            }
            if (data.hasOwnProperty('placeholder')) {
                obj['placeholder'] = ApiClient.convertToType(data['placeholder'], 'String');
            }
        }
        return obj;
    }


}

/**
 * Enable or disable the 'eval on submit' toggle button.
 * @member {Boolean} showButton
 */
AvailableJobSettingEvalOnSubmit.prototype['showButton'] = undefined;

/**
 * Placeholder text to show when the manual input field is hidden (because eval-on-submit has been toggled on by the user). 
 * @member {String} placeholder
 */
AvailableJobSettingEvalOnSubmit.prototype['placeholder'] = undefined;






export default AvailableJobSettingEvalOnSubmit;

