/**
 * Flamenco manager
 * Render Farm manager API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AvailableJobSettingEvalInfo model module.
 * @module model/AvailableJobSettingEvalInfo
 * @version 0.0.0
 */
class AvailableJobSettingEvalInfo {
    /**
     * Constructs a new <code>AvailableJobSettingEvalInfo</code>.
     * Meta-data for the &#39;eval&#39; expression.
     * @alias module:model/AvailableJobSettingEvalInfo
     * @param showLinkButton {Boolean} Enables the 'eval on submit' toggle button behavior for this setting. A toggle button will be shown in Blender's submission interface. When toggled on, the `eval` expression will determine the setting's value. Manually editing the setting is then no longer possible, and instead of an input field, the 'description' string is shown. An example use is the to-be-rendered frame range, which by default automatically follows the scene range, but can be overridden manually when desired. 
     * @param description {String} Description of what the 'eval' expression is doing. It is also used as placeholder text to show when the manual input field is hidden (because eval-on-submit has been toggled on by the user). 
     */
    constructor(showLinkButton, description) { 
        
        AvailableJobSettingEvalInfo.initialize(this, showLinkButton, description);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, showLinkButton, description) { 
        obj['showLinkButton'] = showLinkButton || false;
        obj['description'] = description || '';
    }

    /**
     * Constructs a <code>AvailableJobSettingEvalInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AvailableJobSettingEvalInfo} obj Optional instance to populate.
     * @return {module:model/AvailableJobSettingEvalInfo} The populated <code>AvailableJobSettingEvalInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AvailableJobSettingEvalInfo();

            if (data.hasOwnProperty('showLinkButton')) {
                obj['showLinkButton'] = ApiClient.convertToType(data['showLinkButton'], 'Boolean');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
        }
        return obj;
    }


}

/**
 * Enables the 'eval on submit' toggle button behavior for this setting. A toggle button will be shown in Blender's submission interface. When toggled on, the `eval` expression will determine the setting's value. Manually editing the setting is then no longer possible, and instead of an input field, the 'description' string is shown. An example use is the to-be-rendered frame range, which by default automatically follows the scene range, but can be overridden manually when desired. 
 * @member {Boolean} showLinkButton
 * @default false
 */
AvailableJobSettingEvalInfo.prototype['showLinkButton'] = false;

/**
 * Description of what the 'eval' expression is doing. It is also used as placeholder text to show when the manual input field is hidden (because eval-on-submit has been toggled on by the user). 
 * @member {String} description
 * @default ''
 */
AvailableJobSettingEvalInfo.prototype['description'] = '';






export default AvailableJobSettingEvalInfo;

