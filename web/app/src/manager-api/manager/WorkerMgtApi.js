/**
 * Flamenco manager
 * Render Farm manager API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import Worker from '../model/Worker';
import WorkerList from '../model/WorkerList';
import WorkerSleepSchedule from '../model/WorkerSleepSchedule';
import WorkerStatusChangeRequest from '../model/WorkerStatusChangeRequest';
import WorkerTag from '../model/WorkerTag';
import WorkerTagChangeRequest from '../model/WorkerTagChangeRequest';
import WorkerTagList from '../model/WorkerTagList';

/**
* WorkerMgt service.
* @module manager/WorkerMgtApi
* @version 0.0.0
*/
export default class WorkerMgtApi {

    /**
    * Constructs a new WorkerMgtApi. 
    * @alias module:manager/WorkerMgtApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create a new worker tag.
     * @param {module:model/WorkerTag} workerTag The worker tag.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/WorkerTag} and HTTP response
     */
    createWorkerTagWithHttpInfo(workerTag) {
      let postBody = workerTag;
      // verify the required parameter 'workerTag' is set
      if (workerTag === undefined || workerTag === null) {
        throw new Error("Missing the required parameter 'workerTag' when calling createWorkerTag");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WorkerTag;
      return this.apiClient.callApi(
        '/api/v3/worker-mgt/tags', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a new worker tag.
     * @param {module:model/WorkerTag} workerTag The worker tag.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/WorkerTag}
     */
    createWorkerTag(workerTag) {
      return this.createWorkerTagWithHttpInfo(workerTag)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove the given worker. It is recommended to only call this function when the worker is in `offline` state. If the worker is still running, stop it first. Any task still assigned to the worker will be requeued. 
     * @param {String} workerId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteWorkerWithHttpInfo(workerId) {
      let postBody = null;
      // verify the required parameter 'workerId' is set
      if (workerId === undefined || workerId === null) {
        throw new Error("Missing the required parameter 'workerId' when calling deleteWorker");
      }

      let pathParams = {
        'worker_id': workerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v3/worker-mgt/workers/{worker_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Remove the given worker. It is recommended to only call this function when the worker is in `offline` state. If the worker is still running, stop it first. Any task still assigned to the worker will be requeued. 
     * @param {String} workerId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteWorker(workerId) {
      return this.deleteWorkerWithHttpInfo(workerId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove this worker tag. This unassigns all workers from the tag and removes it.
     * @param {String} tagId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteWorkerTagWithHttpInfo(tagId) {
      let postBody = null;
      // verify the required parameter 'tagId' is set
      if (tagId === undefined || tagId === null) {
        throw new Error("Missing the required parameter 'tagId' when calling deleteWorkerTag");
      }

      let pathParams = {
        'tag_id': tagId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v3/worker-mgt/tag/{tag_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Remove this worker tag. This unassigns all workers from the tag and removes it.
     * @param {String} tagId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteWorkerTag(tagId) {
      return this.deleteWorkerTagWithHttpInfo(tagId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Fetch info about the worker.
     * @param {String} workerId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Worker} and HTTP response
     */
    fetchWorkerWithHttpInfo(workerId) {
      let postBody = null;
      // verify the required parameter 'workerId' is set
      if (workerId === undefined || workerId === null) {
        throw new Error("Missing the required parameter 'workerId' when calling fetchWorker");
      }

      let pathParams = {
        'worker_id': workerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Worker;
      return this.apiClient.callApi(
        '/api/v3/worker-mgt/workers/{worker_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Fetch info about the worker.
     * @param {String} workerId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Worker}
     */
    fetchWorker(workerId) {
      return this.fetchWorkerWithHttpInfo(workerId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} workerId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/WorkerSleepSchedule} and HTTP response
     */
    fetchWorkerSleepScheduleWithHttpInfo(workerId) {
      let postBody = null;
      // verify the required parameter 'workerId' is set
      if (workerId === undefined || workerId === null) {
        throw new Error("Missing the required parameter 'workerId' when calling fetchWorkerSleepSchedule");
      }

      let pathParams = {
        'worker_id': workerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WorkerSleepSchedule;
      return this.apiClient.callApi(
        '/api/v3/worker-mgt/workers/{worker_id}/sleep-schedule', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} workerId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/WorkerSleepSchedule}
     */
    fetchWorkerSleepSchedule(workerId) {
      return this.fetchWorkerSleepScheduleWithHttpInfo(workerId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a single worker tag.
     * @param {String} tagId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/WorkerTag} and HTTP response
     */
    fetchWorkerTagWithHttpInfo(tagId) {
      let postBody = null;
      // verify the required parameter 'tagId' is set
      if (tagId === undefined || tagId === null) {
        throw new Error("Missing the required parameter 'tagId' when calling fetchWorkerTag");
      }

      let pathParams = {
        'tag_id': tagId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WorkerTag;
      return this.apiClient.callApi(
        '/api/v3/worker-mgt/tag/{tag_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get a single worker tag.
     * @param {String} tagId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/WorkerTag}
     */
    fetchWorkerTag(tagId) {
      return this.fetchWorkerTagWithHttpInfo(tagId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get list of worker tags.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/WorkerTagList} and HTTP response
     */
    fetchWorkerTagsWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WorkerTagList;
      return this.apiClient.callApi(
        '/api/v3/worker-mgt/tags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get list of worker tags.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/WorkerTagList}
     */
    fetchWorkerTags() {
      return this.fetchWorkerTagsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get list of workers.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/WorkerList} and HTTP response
     */
    fetchWorkersWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WorkerList;
      return this.apiClient.callApi(
        '/api/v3/worker-mgt/workers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get list of workers.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/WorkerList}
     */
    fetchWorkers() {
      return this.fetchWorkersWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} workerId 
     * @param {module:model/WorkerStatusChangeRequest} workerStatusChangeRequest The status change to request.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    requestWorkerStatusChangeWithHttpInfo(workerId, workerStatusChangeRequest) {
      let postBody = workerStatusChangeRequest;
      // verify the required parameter 'workerId' is set
      if (workerId === undefined || workerId === null) {
        throw new Error("Missing the required parameter 'workerId' when calling requestWorkerStatusChange");
      }
      // verify the required parameter 'workerStatusChangeRequest' is set
      if (workerStatusChangeRequest === undefined || workerStatusChangeRequest === null) {
        throw new Error("Missing the required parameter 'workerStatusChangeRequest' when calling requestWorkerStatusChange");
      }

      let pathParams = {
        'worker_id': workerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v3/worker-mgt/workers/{worker_id}/setstatus', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} workerId 
     * @param {module:model/WorkerStatusChangeRequest} workerStatusChangeRequest The status change to request.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    requestWorkerStatusChange(workerId, workerStatusChangeRequest) {
      return this.requestWorkerStatusChangeWithHttpInfo(workerId, workerStatusChangeRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} workerId 
     * @param {module:model/WorkerSleepSchedule} workerSleepSchedule The new sleep schedule.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    setWorkerSleepScheduleWithHttpInfo(workerId, workerSleepSchedule) {
      let postBody = workerSleepSchedule;
      // verify the required parameter 'workerId' is set
      if (workerId === undefined || workerId === null) {
        throw new Error("Missing the required parameter 'workerId' when calling setWorkerSleepSchedule");
      }
      // verify the required parameter 'workerSleepSchedule' is set
      if (workerSleepSchedule === undefined || workerSleepSchedule === null) {
        throw new Error("Missing the required parameter 'workerSleepSchedule' when calling setWorkerSleepSchedule");
      }

      let pathParams = {
        'worker_id': workerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v3/worker-mgt/workers/{worker_id}/sleep-schedule', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} workerId 
     * @param {module:model/WorkerSleepSchedule} workerSleepSchedule The new sleep schedule.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    setWorkerSleepSchedule(workerId, workerSleepSchedule) {
      return this.setWorkerSleepScheduleWithHttpInfo(workerId, workerSleepSchedule)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} workerId 
     * @param {module:model/WorkerTagChangeRequest} workerTagChangeRequest The list of worker tag IDs this worker should be a member of.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    setWorkerTagsWithHttpInfo(workerId, workerTagChangeRequest) {
      let postBody = workerTagChangeRequest;
      // verify the required parameter 'workerId' is set
      if (workerId === undefined || workerId === null) {
        throw new Error("Missing the required parameter 'workerId' when calling setWorkerTags");
      }
      // verify the required parameter 'workerTagChangeRequest' is set
      if (workerTagChangeRequest === undefined || workerTagChangeRequest === null) {
        throw new Error("Missing the required parameter 'workerTagChangeRequest' when calling setWorkerTags");
      }

      let pathParams = {
        'worker_id': workerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v3/worker-mgt/workers/{worker_id}/settags', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} workerId 
     * @param {module:model/WorkerTagChangeRequest} workerTagChangeRequest The list of worker tag IDs this worker should be a member of.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    setWorkerTags(workerId, workerTagChangeRequest) {
      return this.setWorkerTagsWithHttpInfo(workerId, workerTagChangeRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update an existing worker tag.
     * @param {String} tagId 
     * @param {module:model/WorkerTag} workerTag The updated worker tag.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    updateWorkerTagWithHttpInfo(tagId, workerTag) {
      let postBody = workerTag;
      // verify the required parameter 'tagId' is set
      if (tagId === undefined || tagId === null) {
        throw new Error("Missing the required parameter 'tagId' when calling updateWorkerTag");
      }
      // verify the required parameter 'workerTag' is set
      if (workerTag === undefined || workerTag === null) {
        throw new Error("Missing the required parameter 'workerTag' when calling updateWorkerTag");
      }

      let pathParams = {
        'tag_id': tagId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v3/worker-mgt/tag/{tag_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update an existing worker tag.
     * @param {String} tagId 
     * @param {module:model/WorkerTag} workerTag The updated worker tag.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    updateWorkerTag(tagId, workerTag) {
      return this.updateWorkerTagWithHttpInfo(tagId, workerTag)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
